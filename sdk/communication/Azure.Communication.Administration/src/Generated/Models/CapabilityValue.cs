// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Administration.Models
{
    /// <summary> The possible values for a phone number capability. </summary>
    public readonly partial struct CapabilityValue : IEquatable<CapabilityValue>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CapabilityValue"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CapabilityValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InboundValue = "inbound";
        private const string OutboundValue = "outbound";
        private const string InboundOutboundValue = "inbound+outbound";
        private const string NoneValue = "none";

        /// <summary> inbound. </summary>
        public static CapabilityValue Inbound { get; } = new CapabilityValue(InboundValue);
        /// <summary> outbound. </summary>
        public static CapabilityValue Outbound { get; } = new CapabilityValue(OutboundValue);
        /// <summary> inbound+outbound. </summary>
        public static CapabilityValue InboundOutbound { get; } = new CapabilityValue(InboundOutboundValue);
        /// <summary> none. </summary>
        public static CapabilityValue None { get; } = new CapabilityValue(NoneValue);
        /// <summary> Determines if two <see cref="CapabilityValue"/> values are the same. </summary>
        public static bool operator ==(CapabilityValue left, CapabilityValue right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CapabilityValue"/> values are not the same. </summary>
        public static bool operator !=(CapabilityValue left, CapabilityValue right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CapabilityValue"/>. </summary>
        public static implicit operator CapabilityValue(string value) => new CapabilityValue(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CapabilityValue other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CapabilityValue other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
